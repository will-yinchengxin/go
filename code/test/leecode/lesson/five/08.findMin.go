package five
/*
已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。

给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。

示例 1：
	输入：nums = [3,4,5,1,2]
	输出：1
	解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。

示例 2：
	输入：nums = [4,5,6,7,0,1,2]
	输出：0
	解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。

示例 3：
	输入：nums = [11,13,15,17]
	输出：11
	解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。

提示：
	n == nums.length
	1 <= n <= 5000
	-5000 <= nums[i] <= 5000
	nums 中的所有整数 互不相同
	nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转
*/
func findMin(nums []int) int {
	lenN := len(nums)
	low := 0
	high := lenN - 1

	// 最小值出现在右侧的情况
	// 4,5,6,7,0,1,2 (右边 < 左边)
	// 7,0,1,2
	// 7,0,1
	// 7,0
	// 最小值出现在左侧的情况
	// 0,1,2,4,5,6,7
	// 0,1,2
	// 0,1
	// 以上两种情况均与最右侧的元素比较即可

	// 特殊情况
	// 1

	for low <= high {
		mid := low + (high - low)/2

		// 特殊情况, 处理只有一个元素
		if low == high {
			return nums[low]
		}
		// 先处理 命中 再处理 未命中
		// 最小(大)值一定出现在 循环有序 区间
		if (mid != 0 && nums[mid] < nums[mid-1]) || (mid == 0 && nums[mid] < nums[high]) {
			return nums[mid] // 根据既定的范式, 返回值永远是 mid
		} else if nums[mid] > nums[high] { // 右循环有序
			low = mid + 1
		} else { // 右侧非循环有序: 1) 左侧有序  2) 左侧循环有序
			high = mid - 1
		}
	}
	return -1 // 永远不会执行到此
}